go_test_params: &go_test_params
  results:
    description: "Path to test results"
    type: string
    default: "/tmp/test-results"

go_test_args: &go_test_args
  results: << parameters.results >>

go_prepare_params: &go_prepare_params
  dep:
    description: "To use dep for dependency fetching"
    type: boolean
    default: true
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attachAt:
    description: "Where to attach the workspace"
    type: string
    default: "."

go_prepare_args: &go_prepare_args
  dep: << parameters.dep >>
  attach: << parameters.attach >>
  attachAt: << parameters.attachAt >>

go_build_params: &go_build_params
  building:
    description: "Building steps"
    type: steps
    default:
    - run:
        name: Build
        command: go build -v ./...

go_build: &go_build
  parameters:
    <<: *go_prepare_params
    <<: *go_build_params
  steps:
  - prepare:
      <<: *go_prepare_args
  - build:
      building: << parameters.building >>

go_fossa_params: &go_fossa_params
  upload:
    description: "To upload the results to the fossa service"
    type: boolean
    default: false

docker_arg_params: &docker_arg_params
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs:
    description: "Enable if you pass args"
    type: boolean
    default: false
  args:
    description: "Either none, one or multiple comma-separated Docker build arguments to apply"
    type: string
    default: ""

docker_attach_params: &docker_attach_params
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attachAt:
    description: "Where to attach the workspace"
    type: string
    default: "."

docker_build_params: &docker_build_params
  file:
    description: "Path to the Dockerfile"
    type: string
    default: "Dockerfile"
  cache:
    description: "Use image layer cache"
    type: boolean
    default: false
  prepare:
    description: "Prepare steps after checkout (e.g., chmod)"
    type: steps
    default: []
  path:
    description: "Build path"
    type: string
    default: "."
  addLabels:
    description: "Add default schema labels"
    type: boolean
    default: false
  baseTag:
    description: "Docker base tag to use"
    type: string
    default: app

docker_tags_params: &docker_tags_params
  tags:
    description: "Either one or multiple comma-separated Docker tags to apply and push"
    type: string

docker_build_args: &docker_build_args
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs: << parameters.useArgs >>
  args: << parameters.args >>
  file: << parameters.file >>
  cache: << parameters.cache >>
  prepare: << parameters.prepare >>
  path: << parameters.path >>
  baseTag: << parameters.baseTag >>
  attach: << parameters.attach >>
  attachAt: << parameters.attachAt >>
  addLabels: << parameters.addLabels >>

orbs:
  goorb:
    executors:
      default:
        docker:
        - image: gofunky/golang:1.10.3
        working_directory: ~/app
      alpine:
        docker:
        - image: gofunky/golang:1.10.3-alpine3.8
        working_directory: ~/app
      circleci:
        docker:
        - image: gofunky/golang:1.10.3-circleci
        working_directory: ~/app
    commands:
      prepare:
        parameters:
          <<: *go_prepare_params
        steps:
        - checkout
        - run:
            name: Init Golang Source
            command: |
              URL=`git remote get-url origin`
              URL=`echo "$URL" | sed -e "s/^https:\/\///" -e "s/\.git//" | sed -e "s/^git@//"`
              URL=`echo "$URL" | sed -r 's/github.com:/github.com\//g'`
              REPO="/go/src/$URL/"
              mkdir -pv $REPO
              ln -s $REPO .
              echo "cd $REPO" > goto.sh
              chmod +x goto.sh
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attachAt >>
        - restore_cache:
            keys:
            - go-{{ .Branch }}-{ checksum "/usr/local/go/bin/go" }
        - when:
            condition: << parameters.dep >>
            steps:
              - restore_cache:
                  key: dep-
              - run:
                  name: Update dependencies
                  command: |
                    source goto.sh
                    if [ -e "Gopkg.toml" ]; then
                      echo "Fetching vendor folder"
                      dep ensure -v -vendor-only
                    else
                      echo "Initializing dependencies"
                      dep init -v
                    fi
              - save_cache:
                  key: dep-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
                  paths:
                  - vendor
        - unless:
            condition: << parameters.dep >>
            steps:
              - run:
                  name: Get Dependencies
                  command: |
                    source goto.sh
                    go get ./...
      test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Run Tests
            command: |
              source goto.sh
              trap "go-junit-report <<< parameters.results >>/go-test-report.out > << parameters.results >>/go-test-report.xml" EXIT
              go test -v ./... | tee << parameters.results >>/go-test-report.out
        - store_artifacts:
            path: << parameters.results >>
            destination: test
        - store_test_results:
            path: << parameters.results >>
      race_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Run Race Tests
            command: |
              source goto.sh
              trap "go-junit-report <<< parameters.results >>/go-race-test-report.out > << parameters.results >>/go-race-test-report.xml" EXIT
              go test -v ./... -short -race | tee << parameters.results >>/go-race-test-report.out
        - store_artifacts:
            path: << parameters.results >>
            destination: race-test
        - store_test_results:
            path: << parameters.results >>
      i386_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Run i386 Tests
            command: |
              source goto.sh
              trap "go-junit-report <<< parameters.results >>/go-386-test-report.out > << parameters.results >>/go-i386-test-report.xml" EXIT
              env GOOS=linux GOARCH=386 go test -v ./... | tee << parameters.results >>/go-i386-test-report.out
        - store_artifacts:
            path: << parameters.results >>
            destination: i386-test
        - store_test_results:
            path: << parameters.results >>
      codacy_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Check Codacy Context
            command: |
              if [ -z "$CODACY_TOKEN" ]; then
                echo "ERROR: CODACY_TOKEN is not set!"
                exit 127
              fi
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              goverage -v -coverprofile=<< parameters.results >>/coverage.out ./...
        - run:
            name: Push Coverage Results
            command: |
              source goto.sh
              godacov -t $CODACY_TOKEN -r << parameters.results >>/coverage.out -c $CIRCLE_SHA1 || true
        - store_artifacts:
            path: << parameters.results >>
            destination: codacy
      codecov_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              goverage -v -coverprofile=<< parameters.results >>/coverage.txt -covermode=atomic ./...
        - run:
            name: Push Coverage Results
            command: |
              source goto.sh
              wget -O - https://codecov.io/bash | bash
        - store_artifacts:
            path: << parameters.results >>
            destination: codecov
      fossa_test:
        parameters:
          <<: *go_test_params
          <<: *go_fossa_params
        steps:
        - run:
            name: Check Fossa Context
            command: |
              if [ -z "$FOSSA_API_KEY" ]; then
                echo "ERROR: FOSSA_API_KEY is not set!"
                exit 127
              fi
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              fossa init
              mv .fossa.yml << parameters.results >>/fossa.yml
        - when:
            condition: << parameters.upload >>
            steps:
            - run:
                name: Upload to Fossa
                command: fossa test
        - store_artifacts:
            path: << parameters.results >>
            destination: fossa
      build:
        parameters:
          <<: *go_build_params
        steps:
        - steps: << parameters.building >>
        - save_cache:
            key: go-{{ .Branch }}-{ checksum "/usr/local/go/bin/go" }-{{ epoch }}
            paths:
            - /go/pkg
        - persist_to_workspace:
            root: /go
            paths:
            - src/
            - pkg/
            - bin/
            - repo.env
    jobs:
      build:
        description: "Build Golang App"
        executor: default
        <<: *go_build
      build-alpine:
        description: "Build Golang App in Alpine"
        executor: alpine
        <<: *go_build
      test:
        description: "Test Golang Packages"
        executor: default
        parameters:
          <<: *go_prepare_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - test:
            <<: *go_test_args
      race_test:
        description: "Race Test Golang Packages"
        executor: default
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - race_test:
            <<: *go_test_args
      i386_test:
        description: "Race Test Golang Packages"
        executor: default
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - i386_test:
            <<: *go_test_args
      codacy_test:
        description: "Codacy Coverage Test"
        executor: default
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - codacy_test:
            <<: *go_test_args
      codecov_test:
        description: "Codecov Coverage Test"
        executor: circleci
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - codecov_test:
            <<: *go_test_args
      fossa_test:
        description: "Fossa License Test"
        executor: circleci
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_fossa_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - fossa_test:
            <<: *go_test_args
            upload: << parameters.upload >>

  dockerorb:
    executors:
      default:
        docker:
        - image: docker:18.06.0-git
        working_directory: ~/app
        environment:
          IFS: ","
      compose:
        docker:
        - image: gofunky/compose:1.21.2
        working_directory: ~/app
        environment:
          IFS: ","
    commands:
      login:
        parameters:
          login:
            description: "Login to your repository"
            type: steps
            default: []
        steps:
        - steps: << parameters.login >>
      build:
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
        steps:
        - checkout
        - setup_remote_docker
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attachAt >>
        - steps: << parameters.prepare >>
        - when:
            condition: << parameters.cache >>
            steps:
            - restore_cache:
                keys:
                - docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
            - run:
                name: Load Docker image layer cache
                command: |
                  set +o pipefail
                  docker load -i /caches/<< parameters.baseTag >>.tar | true
        - when:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and without labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
        - unless:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and with labels
                    command: |
                      docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=`git rev-parse --short HEAD` --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and without labels
                    command: |
                      docker build --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
        - when:
            condition: << parameters.cache >>
            steps:
            - run:
                name: Save Docker image layer cache
                command: |
                  mkdir -p /caches
                  docker save -o /caches/<< parameters.baseTag >>.tar << parameters.baseTag >>
            - save_cache:
                key: docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}-{{ epoch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
      tag:
        parameters:
          <<: *docker_tags_params
          baseTag:
            description: "Docker base tag to use"
            type: string
            default: app
        steps:
        - run:
            name: Add Docker tags
            command: |
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker tag << parameters.baseTag >> "$tag"
              done
      test:
        parameters:
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - run:
            name: Install Docker Compose
            command: |
              if [ ! -e "/usr/local/bin/docker-compose" ]; then
                echo "Installing latest Docker Compose..."
                apk add --no-cache py-pip
                pip install docker-compose
              else
                echo "Skipping installation of Docker Compose..."
              fi
        - run:
            name: Run Docker compose tests
            command: |
              docker-compose -f "<< parameters.compose >>" up --exit-code-from sut --build
      push:
        parameters:
          <<: *docker_tags_params
          branch:
            description: "Only push from the given branch"
            type: string
        steps:
        - deploy:
            name: Push application Docker image
            command: |
              tags="<< parameters.tags >>"
              if [ "${CIRCLE_BRANCH}" == "<< parameters.branch >>" ]; then
                for tag in $tags; do
                  docker push "$tag"
                done
              fi
    jobs:
      build:
        description: "Build Docker image"
        executor: default
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
        steps:
        - build:
            <<: *docker_build_args

      build-test:
        description: "Build Docker image"
        executor: default
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - tag:
            tags: << parameters.tags >>
            baseTag: << parameters.baseTag >>
        - test:
            compose: << parameters.compose >>


      build-push:
        description: "Build and push Docker image"
        executor: default
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          login:
            description: "Login to your repository"
            type: steps
            default: []
          branch:
            description: "Only push from the given branch"
            type: string
            default: master
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>
                branch: << parameters.branch >>

      build-test-push:
        description: "Build and push Docker image"
        executor: default
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          login:
            description: "Login to your repository"
            type: steps
            default: []
          branch:
            description: "Only push from the given branch"
            type: string
            default: master
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - test:
                compose: << parameters.compose >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>
                branch: << parameters.branch >>

version: 2.1
workflows:
  build:
    jobs:
    - goorb/test
    - goorb/build-alpine:
        requires:
        - goorb/test
    #    - dockerorb/build-test-push:
    #        context: docker-hub
    #        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
    #        useArgs: true
    #        # Latest version
    #        args: "COMPOSE_VERSION=`curl --silent 'https://api.github.com/repos/docker/compose/releases/latest' | grep -o '\"tag_name\": \"\\K.*?(?=\")'`,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
    #        baseTag: "compose"
    #        tags: "gofunky/compose:latest"
    #        login:
    #        - run:
    #            name: Login to Docker Hub
    #            command: |
    #              docker login -u $DOCKER_USR -p $DOCKER_PWD
    - dockerorb/build-test-push:
        context: docker-hub
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: true
        args: "DOCKER_VERSION=18.06.0,COMPOSE_VERSION=1.21.2,VERSION=1.21.2,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
        baseTag: "compose"
        tags: "gofunky/compose:1.21.2,gofunky/compose:1.21"
        login:
        - run:
            name: Login to Docker Hub
            command: |
              docker login -u $DOCKER_USR -p $DOCKER_PWD
