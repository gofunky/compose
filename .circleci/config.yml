go_test_params: &go_test_params
  results:
    description: "Path to test results"
    type: string
    default: "/tmp/test-results"
  path:
    description: "Package path to test"
    type: string
    default: ./...

go_test_args: &go_test_args
  results: << parameters.results >>
  path: << parameters.path >>

go_prepare_params: &go_prepare_params
  dep:
    description: "To use dep for dependency fetching"
    type: boolean
    default: true
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attachAt:
    description: "Where to attach the workspace"
    type: string
    default: "."

go_prepare_args: &go_prepare_args
  dep: << parameters.dep >>
  attach: << parameters.attach >>
  attachAt: << parameters.attachAt >>

go_build_params: &go_build_params
  building:
    description: "Building steps"
    type: steps
    default:
    - run:
        name: Build
        command: go build -v ./...

go_fossa_params: &go_fossa_params
  upload:
    description: "To upload the results to the fossa service"
    type: boolean
    default: false

go_executor_params: &go_executor_params
  go_version:
    description: "Golang Version"
    type: string
    default: latest
  goos:
    description: "Target OS to compile against"
    type: string
    default: linux
  cgo:
    description: "Disable CGO by setting to '0'"
    type: enum
    enum: ["0", "1"]
    default: "1"
  goarch:
    description: "Target architecture to compile against"
    type: string
    default: amd64

go_executor_args: &go_executor_args
  go_version: << parameters.go_version >>
  goos: << parameters.goos >>
  cgo: << parameters.cgo >>
  goarch: << parameters.goarch>>

go_executor_envs: &go_executor_envs
  GOOS: << parameters.goos >>
  CGO_ENABLED: << parameters.cgo >>
  GOARCH: << parameters.goarch >>

go_alpine_params: &go_alpine_params
  alpine_version:
    description: "Alpine version"
    type: string
    default: ""

go_alpine_args: &go_alpine_args
  alpine_version: << parameters.alpine_version >>

go_custom_build_params: &go_custom_build_params
  upx:
    description: "To use UPX compression on the binaries"
    type: boolean
    default: false
  nodebug:
    descirption: "Enable ldflags that disable debugging"
    type: boolean
    default: false
  output:
    description: "Set binary file name"
    type: string
    default: ""
  input:
    description: "Path to the input files to compile"
    type: string
    default: "."
  flags:
    description: "Additional ldflags"
    type: string
    default: ""
  rebuild:
    description: "Always rebuild"
    type: boolean
    default: true
  tags:
    description: "Build tags"
    type: string
    default: ""

go_custom_build_args: &go_custom_build_args
  upx: << parameters.upx >>
  nodebug: << parameters.nodebug >>
  output: << parameters.output >>
  input: << parameters.input >>
  flags: << parameters.flags >>
  rebuild: << parameters.rebuild >>
  tags: << parameters.tags >>

docker_login_params: &docker_login_params
  login:
    description: "Login command to your repository (using environment variables from your secure context)"
    type: string
    default: echo "Login is UNSPECIFIED"

docker_arg_params: &docker_arg_params
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs:
    description: "Enable if you pass args"
    type: boolean
    default: false
  args:
    description: "Either none, one or multiple comma-separated Docker build arguments to apply"
    type: string
    default: ""

docker_attach_params: &docker_attach_params
  attach:
    description: "Attach workspace"
    type: boolean
    default: false
  attachAt:
    description: "Where to attach the workspace"
    type: string
    default: "."

docker_build_params: &docker_build_params
  file:
    description: "Path to the Dockerfile"
    type: string
    default: "Dockerfile"
  cache:
    description: "Use image layer cache"
    type: boolean
    default: false
  prepare:
    description: "Prepare steps after checkout (e.g., chmod)"
    type: steps
    default: []
  path:
    description: "Build path"
    type: string
    default: "."
  addLabels:
    description: "Add default schema labels"
    type: boolean
    default: false
  baseTag:
    description: "Docker base tag to use"
    type: string
    default: app

docker_tags_params: &docker_tags_params
  tags:
    description: "Either one or multiple comma-separated Docker tags to apply and push"
    type: string
    default: ""

docker_build_args: &docker_build_args
  # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
  useArgs: << parameters.useArgs >>
  args: << parameters.args >>
  file: << parameters.file >>
  cache: << parameters.cache >>
  prepare: << parameters.prepare >>
  path: << parameters.path >>
  baseTag: << parameters.baseTag >>
  attach: << parameters.attach >>
  attachAt: << parameters.attachAt >>
  addLabels: << parameters.addLabels >>

docker_version_params: &docker_version_params
  docker_version:
    description: "Docker version"
    type: string
    default: stable

orbs:
  goorb:
    executors:
      default:
        parameters:
          <<: *go_executor_params
        docker:
        - image: gofunky/golang:<< parameters.go_version >>
        working_directory: ~/app
        environment:
          <<: *go_executor_envs
      alpine:
        parameters:
          <<: *go_executor_params
          <<: *go_alpine_params
        docker:
        - image: gofunky/golang:<< parameters.go_version >>-alpine<< parameters.alpine_version >>
        working_directory: ~/app
        environment:
          <<: *go_executor_envs
      circleci:
        parameters:
          <<: *go_executor_params
        docker:
        - image: gofunky/golang:<< parameters.go_version >>-circleci
        working_directory: ~/app
        environment:
          <<: *go_executor_envs
    commands:
      prepare:
        parameters:
          <<: *go_prepare_params
        steps:
        - checkout
        - run:
            name: Init Golang Source
            command: |
              URL=`git remote get-url origin`
              URL=`echo "$URL" | sed -e "s/^https:\/\///" -e "s/\.git//" | sed -e "s/^git@//"`
              URL=`echo "$URL" | sed -r 's/github.com:/github.com\//g'`
              REPO="/go/src/$URL/"
              mkdir -pv $REPO
              ln -s $REPO .
              echo "cd $REPO" > goto.sh
              chmod +x goto.sh
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attachAt >>
        - restore_cache:
            keys:
            - go-{{ .Branch }}-{ checksum "/usr/local/go/bin/go" }
        - when:
            condition: << parameters.dep >>
            steps:
              - restore_cache:
                  key: dep-
              - run:
                  name: Update dependencies
                  command: |
                    source goto.sh
                    if [ -e "Gopkg.toml" ]; then
                      echo "Fetching vendor folder"
                      dep ensure -v -vendor-only
                    else
                      echo "Initializing dependencies"
                      dep init -v
                    fi
              - save_cache:
                  key: dep-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
                  paths:
                  - vendor
        - unless:
            condition: << parameters.dep >>
            steps:
              - run:
                  name: Get Dependencies
                  command: |
                    source goto.sh
                    go get ./...

      test:
        parameters:
          <<: *go_test_params
          name:
            description: "Unique name to identify the test"
            type: string
            default: "test"
          race:
            description: "Enable race test"
            type: boolean
            default: false
        steps:
        - run:
            name: Run Tests
            command: |
              source goto.sh
              trap "go-junit-report <<< parameters.results >>/go-<< parameters.name >>-report.out > << parameters.results >>/go-<< parameters.name >>-report.xml" EXIT
              go test -v << parameters.path >> <<# parameters.race >>-short -race <</ parameters.race >>| tee << parameters.results >>/go-<< parameters.name >>-report.out
        - store_artifacts:
            path: << parameters.results >>
            destination: << parameters.name >>
        - store_test_results:
            path: << parameters.results >>

      codacy_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Check Codacy Context
            command: |
              if [ -z "$CODACY_TOKEN" ]; then
                echo "ERROR: CODACY_TOKEN is not set!"
                exit 127
              fi
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              goverage -v -coverprofile=<< parameters.results >>/coverage.out << parameters.path >>
        - run:
            name: Push Coverage Results
            command: |
              source goto.sh
              godacov -t $CODACY_TOKEN -r << parameters.results >>/coverage.out -c $CIRCLE_SHA1 || true
        - store_artifacts:
            path: << parameters.results >>
            destination: codacy

      codecov_test:
        parameters:
          <<: *go_test_params
        steps:
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              goverage -v -coverprofile=<< parameters.results >>/coverage.txt -covermode=atomic << parameters.path >>
        - run:
            name: Push Coverage Results
            command: |
              source goto.sh
              wget -O - https://codecov.io/bash | bash
        - store_artifacts:
            path: << parameters.results >>
            destination: codecov

      fossa_test:
        parameters:
          <<: *go_test_params
          <<: *go_fossa_params
        steps:
        - run:
            name: Check Fossa Context
            command: |
              if [ -z "$FOSSA_API_KEY" ]; then
                echo "ERROR: FOSSA_API_KEY is not set!"
                exit 127
              fi
        - run:
            name: Run Coverage Tests
            command: |
              source goto.sh
              fossa init
              mv .fossa.yml << parameters.results >>/fossa.yml
        - when:
            condition: << parameters.upload >>
            steps:
            - run:
                name: Upload to Fossa
                command: fossa test
        - store_artifacts:
            path: << parameters.results >>
            destination: fossa

      build:
        parameters:
          <<: *go_build_params
        steps:
        - steps: << parameters.building >>
        - save_cache:
            key: go-{{ .Branch }}-{ checksum "/usr/local/go/bin/go" }-{{ epoch }}
            paths:
            - /go/pkg
        - persist_to_workspace:
            root: /go
            paths:
            - src/
            - pkg/
            - bin/

      custom_build:
        parameters:
          <<: *go_custom_build_params
        steps:
        - run:
            name: Building binary << parameters.output >>
            command: |
              source goto.sh
              output=""
              if [ -n "<< parameters.output >>" ]; then
                echo "Output file: << parameters.output >>"
                output="-o << parameters.output >>"
              fi
              tags=""
              if [ -n "<< parameters.tags >>" ]; then
                echo "Using tags: << parameters.tags >>"
                tags="-tags << parameters.tags >>"
              fi
              go build $tags $output <<# parameters.rebuild >>-a <</ parameters.rebuild >>-ldflags '<<# parameters.nodebug >>-s -w <</ parameters.nodebug >><< parameters.flags >>' << parameters.input >>
        - when:
            condition: << parameters.upx >>
            steps:
              - run:
                  name: Compressing binary using UPX
                  command: |
                    source goto.sh
                    if [ -n "<< parameters.output >>" ]; then
                      echo "Compressing << parameters.output >>..."
                      ls -l << parameters.output >>
                      upx --brute << parameters.output >>
                      ls -l << parameters.output >>
                    else
                      echo "Skipping compression because output is not defined"
                    fi
        - save_cache:
            key: go-{{ .Branch }}-{ checksum "/usr/local/go/bin/go" }-{{ epoch }}
            paths:
            - /go/pkg
        - persist_to_workspace:
            root: /go
            paths:
            - src/
            - pkg/
            - bin/

    jobs:
      build:
        description: "Build Golang App"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
        executor:
          name: default
          <<: *go_executor_args
        steps:
        - prepare:
            <<: *go_prepare_args
        - build:
            building: << parameters.building >>

      build_alpine:
        description: "Build Golang App on Alpine"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
          <<: *go_alpine_params
        executor:
          name: alpine
          <<: *go_executor_args
          <<: *go_alpine_args
        steps:
        - prepare:
            <<: *go_prepare_args
        - build:
            building: << parameters.building >>

      custom:
        description: "Customized Golang Build"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
          <<: *go_custom_build_params
        executor:
          name: default
          <<: *go_executor_args
        steps:
        - prepare:
            <<: *go_prepare_args
        - custom_build:
            <<: *go_custom_build_args

      custom_alpine:
        description: "Customized Golang Build on Alpine"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
          <<: *go_custom_build_params
          <<: *go_alpine_params
        executor:
          name: alpine
          <<: *go_executor_args
          <<: *go_alpine_args
        steps:
        - prepare:
            <<: *go_prepare_args
        - custom_build:
            <<: *go_custom_build_args

      netgo:
        description: "Golang Build Static with Netgo Package"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
          <<: *go_custom_build_params
          <<: *go_alpine_params
        executor:
          name: alpine
          <<: *go_executor_args
          <<: *go_alpine_args
          cgo: "0"
        steps:
        - prepare:
            <<: *go_prepare_args
        - custom_build:
            <<: *go_custom_build_args
            tags: "netgo"
            flags: -extldflags "-static"

      musl:
        description: "Golang Build Static with Musl Library"
        parameters:
          <<: *go_prepare_params
          <<: *go_build_params
          <<: *go_executor_params
          <<: *go_custom_build_params
          <<: *go_alpine_params
        executor:
          name: alpine
          <<: *go_executor_args
          <<: *go_alpine_args
        environment:
          CC: /usr/local/musl/bin/musl-gcc
        steps:
        - prepare:
            <<: *go_prepare_args
        - custom_build:
            <<: *go_custom_build_args
            flags: -linkmode external -extldflags "-static"

      test:
        description: "Test Golang Packages"
        executor:
          name: default
          <<: *go_executor_args
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - test:
            <<: *go_test_args

      i386_test:
        description: "Test Golang Packages with i386"
        executor:
          name: default
          <<: *go_executor_args
          goarch: "386"
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - test:
            name: "i386"
            <<: *go_test_args

      race_test:
        description: "Race Test Golang Packages"
        executor:
          name: default
          <<: *go_executor_args
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - test:
            name: "race"
            race: true
            <<: *go_test_args

      codacy_test:
        description: "Codacy Coverage Test"
        executor:
          name: default
          <<: *go_executor_args
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - codacy_test:
            <<: *go_test_args

      codecov_test:
        description: "Codecov Coverage Test"
        executor:
          name: circleci
          <<: *go_executor_args
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - codecov_test:
            <<: *go_test_args

      fossa_test:
        description: "Fossa License Test"
        executor:
          name: circleci
          <<: *go_executor_args
        parameters:
          <<: *go_prepare_params
          <<: *go_test_params
          <<: *go_fossa_params
          <<: *go_executor_params
        steps:
        - prepare:
            <<: *go_prepare_args
        - fossa_test:
            <<: *go_test_args
            upload: << parameters.upload >>

  dockerorb:
    executors:
      default:
        parameters:
          <<: *docker_version_params
        docker:
        - image: docker:<< parameters.docker_version >>-git
        working_directory: ~/app
        environment:
          IFS: ","
    commands:
      login:
        parameters:
          <<: *docker_login_params
        steps:
        - run:
            name: "Login to your origin Docker repository"
            command: << parameters.login >>
      build:
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
        steps:
        - checkout
        - setup_remote_docker
        - when:
            condition: << parameters.attach >>
            steps:
            - attach_workspace:
                at: << parameters.attachAt >>
        - steps: << parameters.prepare >>
        - when:
            condition: << parameters.cache >>
            steps:
            - restore_cache:
                keys:
                - docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
            - run:
                name: Load Docker image layer cache
                command: |
                  set +o pipefail
                  docker load -i /caches/<< parameters.baseTag >>.tar | true
        - when:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image with arguments and without labels
                    command: |
                      buildarg=""
                      args="<< parameters.args >>"
                      for arg in $args; do
                        buildarg="${buildarg} --build-arg ${arg}"
                      done
                      build="docker build ${buildarg} --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>"
                      eval $build
        - unless:
            condition: << parameters.useArgs >>
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([a-zA-Z][\w]*=[\w-\/.:]+)(,[a-zA-Z][\w]*=[\w-\/.:]+)*', "<< parameters.args >>"]
            steps:
            - when:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and with labels
                    command: |
                      docker build --build-arg BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"` --build-arg VCS_REF=`git rev-parse --short HEAD` --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
            - unless:
                condition: << parameters.addLabels >>
                steps:
                - run:
                    name: Build Docker image without arguments and without labels
                    command: |
                      docker build --cache-from=<< parameters.baseTag >> -f << parameters.file >> -t << parameters.baseTag >> << parameters.path >>
        - when:
            condition: << parameters.cache >>
            steps:
            - run:
                name: Save Docker image layer cache
                command: |
                  mkdir -p /caches
                  docker save -o /caches/<< parameters.baseTag >>.tar << parameters.baseTag >>
            - save_cache:
                key: docker-<< parameters.path >>-<< parameters.file >>-<< parameters.baseTag >>-{{ .Branch }}-{{ epoch }}
                paths:
                - /caches/<< parameters.baseTag >>.tar
      tag:
        parameters:
          <<: *docker_tags_params
          baseTag:
            description: "Docker base tag to use"
            type: string
            default: app
        steps:
        - run:
            name: Add Docker tags
            command: |
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker tag << parameters.baseTag >> "$tag"
              done
      test:
        parameters:
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - run:
            name: Install Docker Compose
            command: |
              if [ ! -e "/usr/local/bin/docker-compose" ]; then
                echo "Installing latest Docker Compose..."
                apk add --no-cache py-pip
                pip install docker-compose
              else
                echo "Skipping installation of Docker Compose..."
              fi
        - run:
            name: Run Docker compose tests
            command: |
              docker-compose -f "<< parameters.compose >>" up --exit-code-from sut --build --abort-on-container-exit
      push:
        parameters:
          <<: *docker_tags_params
        steps:
        - deploy:
            name: Push application Docker image
            command: |
              tags="<< parameters.tags >>"
              for tag in $tags; do
                docker push "$tag"
              done
    jobs:
      build:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_version_params
        steps:
        - build:
            <<: *docker_build_args

      build-test:
        description: "Build Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - tag:
            tags: << parameters.tags >>
            baseTag: << parameters.baseTag >>
        - test:
            compose: << parameters.compose >>

      build-push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

      build-test-push:
        description: "Build and push Docker image"
        executor:
          name: default
          docker_version: << parameters.docker_version >>
        parameters:
          <<: *docker_arg_params
          <<: *docker_attach_params
          <<: *docker_build_params
          <<: *docker_tags_params
          <<: *docker_version_params
          <<: *docker_login_params
          compose:
            description: "Path to the docker compose test file to test"
            type: string
            default: "docker-compose.test.yml"
        steps:
        - build:
            <<: *docker_build_args
        - when:
            condition: true
            # Use this instead once CircleCI-Public/config-preview-sdk#15 is merged
            # matches: ['([\w-\/.:]+)?(,[\w-\/.:]+)*', "<< parameters.tags >>"]
            steps:
            - tag:
                tags: << parameters.tags >>
                baseTag: << parameters.baseTag >>
            - test:
                compose: << parameters.compose >>
            - login:
                login: << parameters.login >>
            - push:
                tags: << parameters.tags >>

golang_master_filter: &golang_master_filter
  filters:
    branches:
      only:
      - master

version: 2.1
workflows:
  readme:
    jobs:
    - readmyhuborb/update:
        <<: *golang_master_filter
        name: readme
        version: 1.1.0
        context: docker-hub
  build-master:
    jobs:
    - goorb/test:
        name: test-libcompose
        go_version: 1.10.3
        path: ./libcompose/...
        <<: *golang_master_filter
    - goorb/musl:
        name: build-libcompose
        go_version: 1.10.3
        alpine_version: 3.8
        upx: true
        output: /go/bin/docker-compose
        input: ./libcompose/cli/main
        requires:
          - goorb/test
        <<: *golang_master_filter
    - dockerorb/build-test-push:
        name: build-image
        docker_version: 18.06.1
        attach: true
        attachTo: /go
        context: docker-hub
        addLabels: true
        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
        useArgs: true
        args: "DOCKER_VERSION=18.06.0,VERSION=`cd libcompose && git describe --abbrev=0 --tags`"
        baseTag: compose
        tags: "gofunky/compose:`cd libcompose && git describe --abbrev=0 --tags`,gofunky/compose:`cd libcompose && git describe --abbrev=0 --tags`-docker18.06.0,gofunky/compose:stable"
        login: docker login -u $DOCKER_USR -p $DOCKER_PWD
        requires:
        - build-libcompose
        - test-libcompose
        <<: *golang_master_filter
    #    - dockerorb/build-test-push:
    #        context: docker-hub
    #        # Remove this once CircleCI-Public/config-preview-sdk#15 is merged
    #        useArgs: true
    #        # Latest version
    #        args: "COMPOSE_VERSION=`curl --silent 'https://api.github.com/repos/docker/compose/releases/latest' | grep -o '\"tag_name\": \"\\K.*?(?=\")'`,BUILD_DATE=`date -u +\"%Y-%m-%dT%H:%M:%SZ\"`,VCS_REF=`git rev-parse --short HEAD`"
    #        baseTag: "compose"
    #        tags: "gofunky/compose:latest"
    #        login:
    #        - run:
    #            name: Login to Docker Hub
    #            command: |
    #              docker login -u $DOCKER_USR -p $DOCKER_PWD
    # TODO Add latest tag
    # TODO Add PR build